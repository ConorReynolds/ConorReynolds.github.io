#lang racket/base

; (Very) basic support for Anki flashcard generation.

(require racket/contract txexpr)

(provide definition def describe generate-anki-cards)


(define project-root
  (getenv "PROJECT_ROOT"))

(define (anki.csv which)
  (format "~a/anki/~a.csv" project-root which))

(define/contract (definition . elems)
  (->* () #:rest txexpr-elements? txexpr?)
  (txexpr 'definition null elems))

; Just needs to ensure that the input is a string â€” postprocessing done elsewhere.
(define/contract (def . elems)
  (->* () #:rest (listof string?) txexpr?)
  (define str (apply string-append elems))
  (txexpr* 'def null str))

(define/contract (describe . elems)
  (->* () #:rest txexpr-elements? txexpr?)
  (txexpr 'describe null elems))

(define (definition? tx)
  (and (txexpr? tx) (eq? 'definition (get-tag tx))))

(define (def? tx)
  (and (txexpr? tx) (eq? 'def (get-tag tx))))

(define (describe? tx)
  (and (txexpr? tx) (eq? 'describe (get-tag tx))))

(define (generate-anki-cards node doc)
  (define definitions (findf*-txexpr doc definition?))
  (define here (cadr (regexp-match #px"(.*?)\\.html$" (symbol->string node))))
  (when (and (not definitions) (file-exists? (anki.csv here)))
    (delete-file (anki.csv here)))
  (when definitions
    (displayln (format "[INFO]: Generating Anki cards for ~a" node))
    (define out (open-output-file (anki.csv here) #:exists 'truncate))
    (define defs (findf*-txexpr (cons '@ definitions) def?))
    (define descs (findf*-txexpr (cons '@ definitions) describe?))
    (define def->desc (map (lambda (x y) (cons (cadr x) (cadr y))) defs descs))
    (displayln "tags:autogenerated" out)
    (for ([p (in-list def->desc)])
      (displayln (format "\"~a\",\"~a\"" (car p) (cdr p)) out))
    (close-output-port out)))

